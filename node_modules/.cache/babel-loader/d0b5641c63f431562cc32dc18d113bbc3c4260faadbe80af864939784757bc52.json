{"ast":null,"code":"var _jsxFileName = \"/Users/alistair/WebstormProjects/millionaire2/millionaire2/src/pages/QuestionPage/QuestionPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport OptionCell from \"../../components/OptionCell\";\nimport './QuestionPage.styles.css';\nimport questions from '../../gameConfig.json';\nimport { useSelector } from \"react-redux\";\nimport { selectCurrentQuestion, selectCurrentIndex, selectNumberOfAnswers } from \"../../redux/selectors\";\nimport { formatNumberWithCommas, highlightReward } from \"../../utils\";\nimport { useAppDispatch } from \"../../utils/hooks\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuestionPage = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const currentQuestion = useSelector(selectCurrentQuestion);\n  const currentIndex = useSelector(selectCurrentIndex);\n  const numberOfCorrectAnswers = useSelector(selectNumberOfAnswers);\n  const options = (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.options) || [];\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [isCorrectAnswers, setIsCorrectAnswers] = useState(null);\n  const handleSelectAnswer = selectedOption => {\n    if (selectedAnswers.length < numberOfCorrectAnswers) {\n      setSelectedAnswers(prevSelected => [...prevSelected, selectedOption]);\n    }\n  };\n  useEffect(() => {\n    if (selectedAnswers.length === 0) {\n      setIsCorrectAnswers(null);\n      return;\n    }\n\n    // const timeoutId:NodeJS.Timeout = setTimeout(() => {\n    // \tconst correctAnswers = options\n    // \t\t.filter((option) => selectedAnswers.includes(option.label))\n    // \t\t.map((option) => option.isCorrect);\n    //\n    // \tconst isCorrect:boolean = correctAnswers.length === numberOfCorrectAnswers && correctAnswers.every(item => item === true);\n    //\n    // \tsetIsCorrectAnswers(isCorrect);\n    // \t// if(isCorrect) {\n    // \t// \tsetTimeout(() => {\n    // \t// \t\tdispatch(nextQuestionAction())\n    // \t// \t}, 1500)\n    // \t// } else {\n    // \t// \tsetTimeout(() => {\n    // \t// \t\tnavigate('/final')\n    // \t// \t}, 1500)\n    // \t// }\n    // }, 2000);\n\n    // return () => clearTimeout(timeoutId); // Очищення таймеру при зміні стану\n  }, [selectedAnswers, options, numberOfCorrectAnswers, dispatch, navigate]);\n  useEffect(() => {\n    if (currentIndex !== null && currentIndex < questions.questions.length) {\n      setSelectedAnswers([]);\n    } else {\n      navigate('/final');\n    }\n  }, [currentIndex]);\n  const renderQuestionOptions = (currentQuestion, selectedAnswers, isCorrectAnswers, handleSelectAnswer) => {\n    return currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.options.map((option, index) => {\n      const isSelected = selectedAnswers.includes(option.label);\n      const isCorrect = isCorrectAnswers !== null && isSelected && isCorrectAnswers;\n      const isWrong = isCorrectAnswers !== null && isSelected && !isCorrectAnswers;\n      const optionCellClassName = `${isSelected ? \"selected\" : \"\"} ${isCorrect ? \"correct\" : \"\"} ${isWrong ? \"wrong\" : \"\"}`;\n      return /*#__PURE__*/_jsxDEV(OptionCell, {\n        onClick: () => handleSelectAnswer(option.label),\n        className: optionCellClassName,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"Options-label\",\n          children: option.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"Options-value\",\n          children: option.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 6\n        }, this)]\n      }, option.label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }, this);\n    });\n  };\n  const renderRewards = (questions, currentIndex, highlightReward, formatNumberWithCommas) => {\n    return questions.questions.map(({\n      reward\n    }, index) => {\n      const rewardColor = highlightReward(currentIndex, index);\n      return /*#__PURE__*/_jsxDEV(OptionCell, {\n        className: `Reward`,\n        rewardColor: rewardColor,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"$\", formatNumberWithCommas(Number(reward))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 7\n        }, this)\n      }, reward, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 6\n      }, this);\n    }).reverse();\n  };\n  return (\n    /*#__PURE__*/\n    // <div className={\"QuestionPage-container\"}>\n    // \t<div className={\"Question-block\"}>\n    // \t\t<h1 className={\"Question-text\"}>{currentQuestion?.question}</h1>\n    // \t\t<div className={\"Options-container\"}>\n    // \t\t\t{currentQuestion?.options.map((option: {\n    // \t\t\t\tlabel: string;\n    // \t\t\t\tvalue: string,\n    // \t\t\t\tisCorrect: boolean\n    // \t\t\t}, index: number) => {\n    // \t\t\t\treturn (\n    // \t\t\t\t\t<OptionCell\n    // \t\t\t\t\t\tkey={option.label}\n    // \t\t\t\t\t\tonClick={() => handleSelectAnswer(option.label)}\n    // \t\t\t\t\t\tclassName={`${selectedAnswers.includes(option.label) ? 'selected' : ''}\n    //     \t\t\t\t\t\t${isCorrectAnswers !== null &&\n    // \t\t\t\t\t\t\tselectedAnswers.includes(option.label) &&\n    // \t\t\t\t\t\t\tisCorrectAnswers\n    // \t\t\t\t\t\t\t\t? 'correct'\n    // \t\t\t\t\t\t\t\t: ''}\n    //    \t\t\t\t\t\t\t${isCorrectAnswers !== null &&\n    // \t\t\t\t\t\t\tselectedAnswers.includes(option.label) &&\n    // \t\t\t\t\t\t\t!isCorrectAnswers\n    // \t\t\t\t\t\t\t\t? 'wrong'\n    // \t\t\t\t\t\t\t\t: ''}\n    // \t\t\t\t\t\t\t\t`}\n    // \t\t\t\t\t>\n    // \t\t\t\t\t\t<span className={\"Options-label\"}>{option.label}</span>\n    // \t\t\t\t\t\t<span className={\"Options-value\"}>{option.value}</span>\n    // \t\t\t\t\t</OptionCell>\n    //\n    // \t\t\t\t)\n    // \t\t\t})}\n    // \t\t</div>\n    // \t</div>\n    // \t<div className={\"Reward-block\"}>\n    // \t\t{questions.questions.map(({reward}, index: number) => {\n    // \t\t\treturn (\n    // \t\t\t\t<OptionCell\n    // \t\t\t\t\tkey={reward}\n    // \t\t\t\t\tclassName={`Reward`}\n    // \t\t\t\t\trewardColor={`${highlightReward(currentIndex, index)}`}\n    // \t\t\t\t>\n    // \t\t\t\t\t<span>${formatNumberWithCommas(Number(reward))}</span>\n    // \t\t\t\t</OptionCell>\n    // \t\t\t)\n    // \t\t}).reverse()}\n    // \t</div>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: \"QuestionPage-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Question-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"Question-text\",\n          children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Options-container\",\n          children: renderQuestionOptions(currentQuestion, selectedAnswers, isCorrectAnswers, handleSelectAnswer)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Reward-block\",\n        children: renderRewards(questions, currentIndex, highlightReward, formatNumberWithCommas)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 3\n    }, this)\n  );\n};\n_s(QuestionPage, \"ZUl/3LrVI2L677K2mh3OTGvyDig=\", false, function () {\n  return [useAppDispatch, useNavigate, useSelector, useSelector, useSelector];\n});\n_c = QuestionPage;\nvar _c;\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"names":["React","useEffect","useState","OptionCell","questions","useSelector","selectCurrentQuestion","selectCurrentIndex","selectNumberOfAnswers","formatNumberWithCommas","highlightReward","useAppDispatch","useNavigate","jsxDEV","_jsxDEV","QuestionPage","_s","dispatch","navigate","currentQuestion","currentIndex","numberOfCorrectAnswers","options","selectedAnswers","setSelectedAnswers","isCorrectAnswers","setIsCorrectAnswers","handleSelectAnswer","selectedOption","length","prevSelected","renderQuestionOptions","map","option","index","isSelected","includes","label","isCorrect","isWrong","optionCellClassName","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","renderRewards","reward","rewardColor","Number","reverse","question","_c","$RefreshReg$"],"sources":["/Users/alistair/WebstormProjects/millionaire2/millionaire2/src/pages/QuestionPage/QuestionPage.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\n\nimport OptionCell from \"../../components/OptionCell\";\nimport './QuestionPage.styles.css'\nimport questions from '../../gameConfig.json'\nimport {useSelector} from \"react-redux\";\nimport {selectCurrentQuestion, selectCurrentIndex, selectNumberOfAnswers} from \"../../redux/selectors\";\nimport {formatNumberWithCommas, highlightReward} from \"../../utils\";\nimport {useAppDispatch} from \"../../utils/hooks\";\nimport {nextQuestionAction} from \"../../redux/actions\";\nimport {useNavigate} from \"react-router-dom\";\nimport HexagonalBlock from \"../../components/OptionCell\";\n\n\nexport const QuestionPage: React.FC=() => {\n\tconst dispatch=useAppDispatch()\n\tconst navigate=useNavigate()\n\tconst currentQuestion=useSelector(selectCurrentQuestion)\n\tconst currentIndex=useSelector(selectCurrentIndex)\n\tconst numberOfCorrectAnswers = useSelector(selectNumberOfAnswers)\n\tconst options=currentQuestion?.options || [];\n\n\tconst [selectedAnswers, setSelectedAnswers] = useState<string[]>([]);\n\tconst [isCorrectAnswers, setIsCorrectAnswers] = useState<boolean | null>(null);\n\n\tconst handleSelectAnswer = (selectedOption: string) => {\n\t\tif (selectedAnswers.length < numberOfCorrectAnswers) {\n\t\t\tsetSelectedAnswers((prevSelected) => [...prevSelected, selectedOption]);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (selectedAnswers.length === 0) {\n\t\t\tsetIsCorrectAnswers(null);\n\t\t\treturn;\n\t\t}\n\n\t\t// const timeoutId:NodeJS.Timeout = setTimeout(() => {\n\t\t// \tconst correctAnswers = options\n\t\t// \t\t.filter((option) => selectedAnswers.includes(option.label))\n\t\t// \t\t.map((option) => option.isCorrect);\n\t\t//\n\t\t// \tconst isCorrect:boolean = correctAnswers.length === numberOfCorrectAnswers && correctAnswers.every(item => item === true);\n\t\t//\n\t\t// \tsetIsCorrectAnswers(isCorrect);\n\t\t// \t// if(isCorrect) {\n\t\t// \t// \tsetTimeout(() => {\n\t\t// \t// \t\tdispatch(nextQuestionAction())\n\t\t// \t// \t}, 1500)\n\t\t// \t// } else {\n\t\t// \t// \tsetTimeout(() => {\n\t\t// \t// \t\tnavigate('/final')\n\t\t// \t// \t}, 1500)\n\t\t// \t// }\n\t\t// }, 2000);\n\n\t\t// return () => clearTimeout(timeoutId); // Очищення таймеру при зміні стану\n\t}, [selectedAnswers, options, numberOfCorrectAnswers, dispatch, navigate]);\n\n\tuseEffect(() => {\n\t\tif (currentIndex !== null && currentIndex < questions.questions.length) {\n\t\t\tsetSelectedAnswers([])\n\t\t} else {\n\t\t\tnavigate('/final')\n\t\t}\n\t}, [currentIndex])\n\n\n\tconst renderQuestionOptions = (\n\t\tcurrentQuestion: any,\n\t\tselectedAnswers: any,\n\t\tisCorrectAnswers: any,\n\t\thandleSelectAnswer: any\n\t) => {\n\t\treturn currentQuestion?.options.map((option: {label: string, value: string, isCorrect: boolean}, index: number) => {\n\t\t\tconst isSelected = selectedAnswers.includes(option.label);\n\t\t\tconst isCorrect = isCorrectAnswers !== null && isSelected && isCorrectAnswers;\n\t\t\tconst isWrong = isCorrectAnswers !== null && isSelected && !isCorrectAnswers;\n\n\t\t\tconst optionCellClassName = `${isSelected ? \"selected\" : \"\"} ${\n\t\t\t\tisCorrect ? \"correct\" : \"\"\n\t\t\t} ${isWrong ? \"wrong\" : \"\"}`;\n\n\t\t\treturn (\n\t\t\t\t<OptionCell\n\t\t\t\t\tkey={option.label}\n\t\t\t\t\tonClick={() => handleSelectAnswer(option.label)}\n\t\t\t\t\tclassName={optionCellClassName}\n\t\t\t\t>\n\t\t\t\t\t<span className={\"Options-label\"}>{option.label}</span>\n\t\t\t\t\t<span className={\"Options-value\"}>{option.value}</span>\n\t\t\t\t</OptionCell>\n\t\t\t);\n\t\t});\n\t};\n\n\tconst renderRewards = (questions: any, currentIndex: number | null, highlightReward: any, formatNumberWithCommas: any) => {\n\t\treturn questions.questions\n\t\t\t.map(({ reward }: {reward: string}, index: number) => {\n\t\t\t\tconst rewardColor = highlightReward(currentIndex, index);\n\t\t\t\treturn (\n\t\t\t\t\t<OptionCell\n\t\t\t\t\t\tkey={reward}\n\t\t\t\t\t\tclassName={`Reward`}\n\t\t\t\t\t\trewardColor={rewardColor}\n\t\t\t\t\t>\n\t\t\t\t\t\t<span>${formatNumberWithCommas(Number(reward))}</span>\n\t\t\t\t\t</OptionCell>\n\t\t\t\t);\n\t\t\t})\n\t\t\t.reverse();\n\t};\n\treturn (\n\t\t// <div className={\"QuestionPage-container\"}>\n\t\t// \t<div className={\"Question-block\"}>\n\t\t// \t\t<h1 className={\"Question-text\"}>{currentQuestion?.question}</h1>\n\t\t// \t\t<div className={\"Options-container\"}>\n\t\t// \t\t\t{currentQuestion?.options.map((option: {\n\t\t// \t\t\t\tlabel: string;\n\t\t// \t\t\t\tvalue: string,\n\t\t// \t\t\t\tisCorrect: boolean\n\t\t// \t\t\t}, index: number) => {\n\t\t// \t\t\t\treturn (\n\t\t// \t\t\t\t\t<OptionCell\n\t\t// \t\t\t\t\t\tkey={option.label}\n\t\t// \t\t\t\t\t\tonClick={() => handleSelectAnswer(option.label)}\n\t\t// \t\t\t\t\t\tclassName={`${selectedAnswers.includes(option.label) ? 'selected' : ''}\n        //     \t\t\t\t\t\t${isCorrectAnswers !== null &&\n\t\t// \t\t\t\t\t\t\tselectedAnswers.includes(option.label) &&\n\t\t// \t\t\t\t\t\t\tisCorrectAnswers\n\t\t// \t\t\t\t\t\t\t\t? 'correct'\n\t\t// \t\t\t\t\t\t\t\t: ''}\n        //    \t\t\t\t\t\t\t${isCorrectAnswers !== null &&\n\t\t// \t\t\t\t\t\t\tselectedAnswers.includes(option.label) &&\n\t\t// \t\t\t\t\t\t\t!isCorrectAnswers\n\t\t// \t\t\t\t\t\t\t\t? 'wrong'\n\t\t// \t\t\t\t\t\t\t\t: ''}\n\t\t// \t\t\t\t\t\t\t\t`}\n\t\t// \t\t\t\t\t>\n\t\t// \t\t\t\t\t\t<span className={\"Options-label\"}>{option.label}</span>\n\t\t// \t\t\t\t\t\t<span className={\"Options-value\"}>{option.value}</span>\n\t\t// \t\t\t\t\t</OptionCell>\n\t\t//\n\t\t// \t\t\t\t)\n\t\t// \t\t\t})}\n\t\t// \t\t</div>\n\t\t// \t</div>\n\t\t// \t<div className={\"Reward-block\"}>\n\t\t// \t\t{questions.questions.map(({reward}, index: number) => {\n\t\t// \t\t\treturn (\n\t\t// \t\t\t\t<OptionCell\n\t\t// \t\t\t\t\tkey={reward}\n\t\t// \t\t\t\t\tclassName={`Reward`}\n\t\t// \t\t\t\t\trewardColor={`${highlightReward(currentIndex, index)}`}\n\t\t// \t\t\t\t>\n\t\t// \t\t\t\t\t<span>${formatNumberWithCommas(Number(reward))}</span>\n\t\t// \t\t\t\t</OptionCell>\n\t\t// \t\t\t)\n\t\t// \t\t}).reverse()}\n\t\t// \t</div>\n\t\t// </div>\n\n\t\t<div className={\"QuestionPage-container\"}>\n\t\t\t<div className={\"Question-block\"}>\n\t\t\t\t<h1 className={\"Question-text\"}>{currentQuestion?.question}</h1>\n\t\t\t\t<div className={\"Options-container\"}>\n\t\t\t\t\t{renderQuestionOptions(\n\t\t\t\t\t\tcurrentQuestion,\n\t\t\t\t\t\tselectedAnswers,\n\t\t\t\t\t\tisCorrectAnswers,\n\t\t\t\t\t\thandleSelectAnswer\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className={\"Reward-block\"}>\n\t\t\t\t{renderRewards(questions, currentIndex, highlightReward, formatNumberWithCommas)}\n\t\t\t</div>\n\t\t</div>\n\n\t)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}