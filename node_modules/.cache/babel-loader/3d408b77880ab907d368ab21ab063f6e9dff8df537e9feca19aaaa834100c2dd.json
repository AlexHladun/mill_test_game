{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  value: 0,\n  status: 'idle'\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const mainSlice = createSlice({\n  name: 'mainSlice',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {},\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {}\n});\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = state => {};\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport default mainSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","value","status","mainSlice","name","reducers","extraReducers","builder","selectCount","state","reducer"],"sources":["/Users/alistair/WebstormProjects/millionaire2/millionaire2/src/redux/mainSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from './store';\n\nexport interface MainState {\n\tvalue: number;\n\tstatus: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: MainState = {\n\tvalue: 0,\n\tstatus: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const mainSlice = createSlice({\n\tname: 'mainSlice',\n\tinitialState,\n\t// The `reducers` field lets us define reducers and generate associated actions\n\treducers: {\n\n\t},\n\t// The `extraReducers` field lets the slice handle actions defined elsewhere,\n\t// including actions generated by createAsyncThunk or in other slices.\n\textraReducers: (builder) => {\n\n\t},\n});\n\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => {\n\n};\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport default mainSlice.reducer;\n"],"mappings":"AAAA,SAA2BA,WAAW,QAAuB,kBAAkB;AAQ/E,MAAMC,YAAuB,GAAG;EAC/BC,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EACpCK,IAAI,EAAE,WAAW;EACjBJ,YAAY;EACZ;EACAK,QAAQ,EAAE,CAEV,CAAC;EACD;EACA;EACAC,aAAa,EAAGC,OAAO,IAAK,CAE5B;AACD,CAAC,CAAC;;AAGF;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,KAAgB,IAAK,CAEjD,CAAC;;AAED;AACA;;AAEA,eAAeN,SAAS,CAACO,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}