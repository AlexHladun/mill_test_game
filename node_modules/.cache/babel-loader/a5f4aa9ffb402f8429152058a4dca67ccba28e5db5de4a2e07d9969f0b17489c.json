{"ast":null,"code":"var _jsxFileName = \"/Users/alistair/WebstormProjects/millionaire2/millionaire2/src/pages/QuestionPage/QuestionPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport './QuestionPage.styles.css';\nimport questions from '../../gameConfig.json';\nimport { useSelector } from \"react-redux\";\nimport { selectCurrentQuestion, selectCurrentIndex, selectNumberOfAnswers } from \"../../redux/selectors\";\nimport { formatNumberWithCommas } from \"../../utils\";\nimport { useAppDispatch } from \"../../utils/hooks\";\nimport { useNavigate } from \"react-router-dom\";\nimport HexagonalBlock from \"../../components/OptionCell\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuestionPage = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const currentQuestion = useSelector(selectCurrentQuestion);\n  const currentIndex = useSelector(selectCurrentIndex);\n  const numberOfCorrectAnswers = useSelector(selectNumberOfAnswers);\n  const options = (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.options) || [];\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [isCorrectAnswers, setIsCorrectAnswers] = useState(null);\n  const handleSelectAnswer = selectedOption => {\n    if (selectedAnswers.length < numberOfCorrectAnswers) {\n      setSelectedAnswers(prevSelected => [...prevSelected, selectedOption]);\n    }\n  };\n  useEffect(() => {\n    if (selectedAnswers.length === 0) {\n      setIsCorrectAnswers(null);\n      return;\n    }\n\n    // const timeoutId:NodeJS.Timeout = setTimeout(() => {\n    // \tconst correctAnswers = options\n    // \t\t.filter((option) => selectedAnswers.includes(option.label))\n    // \t\t.map((option) => option.isCorrect);\n    //\n    // \tconst isCorrect:boolean = correctAnswers.length === numberOfCorrectAnswers && correctAnswers.every(item => item === true);\n    //\n    // \tsetIsCorrectAnswers(isCorrect);\n    // \t// if(isCorrect) {\n    // \t// \tsetTimeout(() => {\n    // \t// \t\tdispatch(nextQuestionAction())\n    // \t// \t}, 1500)\n    // \t// } else {\n    // \t// \tsetTimeout(() => {\n    // \t// \t\tnavigate('/final')\n    // \t// \t}, 1500)\n    // \t// }\n    // }, 2000);\n\n    // return () => clearTimeout(timeoutId); // Очищення таймеру при зміні стану\n  }, [selectedAnswers, options, numberOfCorrectAnswers, dispatch, navigate]);\n  useEffect(() => {\n    if (currentIndex !== null && currentIndex < questions.questions.length) {\n      setSelectedAnswers([]);\n    } else {\n      navigate('/final');\n    }\n  }, [currentIndex]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"QuestionPage-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Question-block\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"Question-text\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Options-container\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.options.map((option, index) => {\n          return (\n            /*#__PURE__*/\n            // <OptionCell\n            // \tkey={option.label}\n            // \tonClick={() => handleSelectAnswer(option.label)}\n            // \tclassName={`${selectedAnswers.includes(option.label) ? 'selected' : ''}\n            // \t\t${isCorrectAnswers !== null &&\n            // \t\tselectedAnswers.includes(option.label) &&\n            // \t\tisCorrectAnswers\n            // \t\t\t? 'correct'\n            // \t\t\t: ''}\n            // \t\t${isCorrectAnswers !== null &&\n            // \t\tselectedAnswers.includes(option.label) &&\n            // \t\t!isCorrectAnswers\n            // \t\t\t? 'wrong'\n            // \t\t\t: ''}\n            // \t\t\t`}\n            // >\n            // \t<span className={\"Options-label\"}>{option.label}</span>\n            // \t<span className={\"Options-value\"}>{option.value}</span>\n            // </OptionCell>\n            _jsxDEV(HexagonalBlock, {\n              width: 200,\n              height: 200,\n              blockClass: \"custom-block\" // Назва класу блоку\n              ,\n              borderClass: \"red-border\" // Назва класу для червоного бордеру\n              ,\n              backgroundClass: \"green-bg\" // Назва класу для зеленого фону внутрішнього блоку\n              ,\n              onClick: () => handleSelectAnswer(option.label),\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"Options-label\",\n                children: option.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"Options-value\",\n                children: option.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 8\n            }, this)\n          );\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Reward-block\",\n      children: questions.questions.map(({\n        reward\n      }, index) => {\n        return (\n          /*#__PURE__*/\n          // <OptionCell\n          // \tkey={reward}\n          // \tclassName={`Reward`}\n          // \trewardColor={`${highlightReward(currentIndex, index)}`}\n          // >\n          // \t<span>${formatNumberWithCommas(Number(reward))}</span>\n          // </OptionCell>\n          _jsxDEV(HexagonalBlock, {\n            width: 200,\n            height: 200,\n            className: \"custom-block\" // Назва класу блоку\n            ,\n            borderColor: \"red-border\" // Назва класу для червоного бордеру\n            ,\n            backgroundColor: \"green-bg\" // Назва класу для зеленого фону внутрішнього блоку\n            // onClick={() => handleSelectAnswer(option.label)}\n            ,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", formatNumberWithCommas(Number(reward))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 7\n          }, this)\n        );\n      }).reverse()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 3\n  }, this);\n};\n_s(QuestionPage, \"ZUl/3LrVI2L677K2mh3OTGvyDig=\", false, function () {\n  return [useAppDispatch, useNavigate, useSelector, useSelector, useSelector];\n});\n_c = QuestionPage;\nvar _c;\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"names":["React","useEffect","useState","questions","useSelector","selectCurrentQuestion","selectCurrentIndex","selectNumberOfAnswers","formatNumberWithCommas","useAppDispatch","useNavigate","HexagonalBlock","jsxDEV","_jsxDEV","QuestionPage","_s","dispatch","navigate","currentQuestion","currentIndex","numberOfCorrectAnswers","options","selectedAnswers","setSelectedAnswers","isCorrectAnswers","setIsCorrectAnswers","handleSelectAnswer","selectedOption","length","prevSelected","className","children","question","fileName","_jsxFileName","lineNumber","columnNumber","map","option","index","width","height","blockClass","borderClass","backgroundClass","onClick","label","value","reward","borderColor","backgroundColor","Number","reverse","_c","$RefreshReg$"],"sources":["/Users/alistair/WebstormProjects/millionaire2/millionaire2/src/pages/QuestionPage/QuestionPage.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\n\nimport OptionCell from \"../../components/OptionCell\";\nimport './QuestionPage.styles.css'\nimport questions from '../../gameConfig.json'\nimport {useSelector} from \"react-redux\";\nimport {selectCurrentQuestion, selectCurrentIndex, selectNumberOfAnswers} from \"../../redux/selectors\";\nimport {formatNumberWithCommas, highlightReward} from \"../../utils\";\nimport {useAppDispatch} from \"../../utils/hooks\";\nimport {nextQuestionAction} from \"../../redux/actions\";\nimport {useNavigate} from \"react-router-dom\";\nimport HexagonalBlock from \"../../components/OptionCell\";\n\n\nexport const QuestionPage: React.FC=() => {\n\tconst dispatch=useAppDispatch()\n\tconst navigate=useNavigate()\n\tconst currentQuestion=useSelector(selectCurrentQuestion)\n\tconst currentIndex=useSelector(selectCurrentIndex)\n\tconst numberOfCorrectAnswers = useSelector(selectNumberOfAnswers)\n\tconst options=currentQuestion?.options || [];\n\n\tconst [selectedAnswers, setSelectedAnswers] = useState<string[]>([]);\n\tconst [isCorrectAnswers, setIsCorrectAnswers] = useState<boolean | null>(null);\n\n\tconst handleSelectAnswer = (selectedOption: string) => {\n\t\tif (selectedAnswers.length < numberOfCorrectAnswers) {\n\t\t\tsetSelectedAnswers((prevSelected) => [...prevSelected, selectedOption]);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (selectedAnswers.length === 0) {\n\t\t\tsetIsCorrectAnswers(null);\n\t\t\treturn;\n\t\t}\n\n\t\t// const timeoutId:NodeJS.Timeout = setTimeout(() => {\n\t\t// \tconst correctAnswers = options\n\t\t// \t\t.filter((option) => selectedAnswers.includes(option.label))\n\t\t// \t\t.map((option) => option.isCorrect);\n\t\t//\n\t\t// \tconst isCorrect:boolean = correctAnswers.length === numberOfCorrectAnswers && correctAnswers.every(item => item === true);\n\t\t//\n\t\t// \tsetIsCorrectAnswers(isCorrect);\n\t\t// \t// if(isCorrect) {\n\t\t// \t// \tsetTimeout(() => {\n\t\t// \t// \t\tdispatch(nextQuestionAction())\n\t\t// \t// \t}, 1500)\n\t\t// \t// } else {\n\t\t// \t// \tsetTimeout(() => {\n\t\t// \t// \t\tnavigate('/final')\n\t\t// \t// \t}, 1500)\n\t\t// \t// }\n\t\t// }, 2000);\n\n\t\t// return () => clearTimeout(timeoutId); // Очищення таймеру при зміні стану\n\t}, [selectedAnswers, options, numberOfCorrectAnswers, dispatch, navigate]);\n\n\tuseEffect(() => {\n\t\tif (currentIndex !== null && currentIndex < questions.questions.length) {\n\t\t\tsetSelectedAnswers([])\n\t\t} else {\n\t\t\tnavigate('/final')\n\t\t}\n\t}, [currentIndex])\n\n\treturn (\n\t\t<div className={\"QuestionPage-container\"}>\n\t\t\t<div className={\"Question-block\"}>\n\t\t\t\t<h1 className={\"Question-text\"}>{currentQuestion?.question}</h1>\n\t\t\t\t<div className={\"Options-container\"}>\n\t\t\t\t\t{currentQuestion?.options.map((option: {\n\t\t\t\t\t\tlabel: string;\n\t\t\t\t\t\tvalue: string,\n\t\t\t\t\t\tisCorrect: boolean\n\t\t\t\t\t}, index: number) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t// <OptionCell\n\t\t\t\t\t\t\t// \tkey={option.label}\n\t\t\t\t\t\t\t// \tonClick={() => handleSelectAnswer(option.label)}\n\t\t\t\t\t\t\t// \tclassName={`${selectedAnswers.includes(option.label) ? 'selected' : ''}\n            \t\t\t\t// \t\t${isCorrectAnswers !== null &&\n\t\t\t\t\t\t\t// \t\tselectedAnswers.includes(option.label) &&\n\t\t\t\t\t\t\t// \t\tisCorrectAnswers\n\t\t\t\t\t\t\t// \t\t\t? 'correct'\n\t\t\t\t\t\t\t// \t\t\t: ''}\n           \t\t\t\t\t// \t\t${isCorrectAnswers !== null &&\n\t\t\t\t\t\t\t// \t\tselectedAnswers.includes(option.label) &&\n\t\t\t\t\t\t\t// \t\t!isCorrectAnswers\n\t\t\t\t\t\t\t// \t\t\t? 'wrong'\n\t\t\t\t\t\t\t// \t\t\t: ''}\n\t\t\t\t\t\t\t// \t\t\t`}\n\t\t\t\t\t\t\t// >\n\t\t\t\t\t\t\t// \t<span className={\"Options-label\"}>{option.label}</span>\n\t\t\t\t\t\t\t// \t<span className={\"Options-value\"}>{option.value}</span>\n\t\t\t\t\t\t\t// </OptionCell>\n\t\t\t\t\t\t\t<HexagonalBlock\n\t\t\t\t\t\t\t\twidth={200}\n\t\t\t\t\t\t\t\theight={200}\n\t\t\t\t\t\t\t\tblockClass=\"custom-block\" // Назва класу блоку\n\t\t\t\t\t\t\t\tborderClass=\"red-border\" // Назва класу для червоного бордеру\n\t\t\t\t\t\t\t\tbackgroundClass=\"green-bg\" // Назва класу для зеленого фону внутрішнього блоку\n\t\t\t\t\t\t\t\tonClick={() => handleSelectAnswer(option.label)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className={\"Options-label\"}>{option.label}</span>\n\t\t\t\t\t\t\t\t<span className={\"Options-value\"}>{option.value}</span>\n\t\t\t\t\t\t\t</HexagonalBlock>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className={\"Reward-block\"}>\n\t\t\t\t{questions.questions.map(({reward}, index: number) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t// <OptionCell\n\t\t\t\t\t\t// \tkey={reward}\n\t\t\t\t\t\t// \tclassName={`Reward`}\n\t\t\t\t\t\t// \trewardColor={`${highlightReward(currentIndex, index)}`}\n\t\t\t\t\t\t// >\n\t\t\t\t\t\t// \t<span>${formatNumberWithCommas(Number(reward))}</span>\n\t\t\t\t\t\t// </OptionCell>\n\t\t\t\t\t\t<HexagonalBlock\n\t\t\t\t\t\t\twidth={200}\n\t\t\t\t\t\t\theight={200}\n\t\t\t\t\t\t\tclassName=\"custom-block\" // Назва класу блоку\n\t\t\t\t\t\t\tborderColor=\"red-border\" // Назва класу для червоного бордеру\n\t\t\t\t\t\t\tbackgroundColor=\"green-bg\" // Назва класу для зеленого фону внутрішнього блоку\n\t\t\t\t\t\t\t// onClick={() => handleSelectAnswer(option.label)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span>${formatNumberWithCommas(Number(reward))}</span>\n\t\t\t\t\t\t</HexagonalBlock>\n\t\t\t\t\t)\n\t\t\t\t}).reverse()}\n\t\t\t</div>\n\t\t</div>\n\t)\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAGhD,OAAO,2BAA2B;AAClC,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,SAAQC,WAAW,QAAO,aAAa;AACvC,SAAQC,qBAAqB,EAAEC,kBAAkB,EAAEC,qBAAqB,QAAO,uBAAuB;AACtG,SAAQC,sBAAsB,QAAwB,aAAa;AACnE,SAAQC,cAAc,QAAO,mBAAmB;AAEhD,SAAQC,WAAW,QAAO,kBAAkB;AAC5C,OAAOC,cAAc,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzD,OAAO,MAAMC,YAAsB,GAACA,CAAA,KAAM;EAAAC,EAAA;EACzC,MAAMC,QAAQ,GAACP,cAAc,CAAC,CAAC;EAC/B,MAAMQ,QAAQ,GAACP,WAAW,CAAC,CAAC;EAC5B,MAAMQ,eAAe,GAACd,WAAW,CAACC,qBAAqB,CAAC;EACxD,MAAMc,YAAY,GAACf,WAAW,CAACE,kBAAkB,CAAC;EAClD,MAAMc,sBAAsB,GAAGhB,WAAW,CAACG,qBAAqB,CAAC;EACjE,MAAMc,OAAO,GAAC,CAAAH,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEG,OAAO,KAAI,EAAE;EAE5C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGrB,QAAQ,CAAW,EAAE,CAAC;EACpE,MAAM,CAACsB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGvB,QAAQ,CAAiB,IAAI,CAAC;EAE9E,MAAMwB,kBAAkB,GAAIC,cAAsB,IAAK;IACtD,IAAIL,eAAe,CAACM,MAAM,GAAGR,sBAAsB,EAAE;MACpDG,kBAAkB,CAAEM,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEF,cAAc,CAAC,CAAC;IACxE;EACD,CAAC;EAED1B,SAAS,CAAC,MAAM;IACf,IAAIqB,eAAe,CAACM,MAAM,KAAK,CAAC,EAAE;MACjCH,mBAAmB,CAAC,IAAI,CAAC;MACzB;IACD;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;EACD,CAAC,EAAE,CAACH,eAAe,EAAED,OAAO,EAAED,sBAAsB,EAAEJ,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EAE1EhB,SAAS,CAAC,MAAM;IACf,IAAIkB,YAAY,KAAK,IAAI,IAAIA,YAAY,GAAGhB,SAAS,CAACA,SAAS,CAACyB,MAAM,EAAE;MACvEL,kBAAkB,CAAC,EAAE,CAAC;IACvB,CAAC,MAAM;MACNN,QAAQ,CAAC,QAAQ,CAAC;IACnB;EACD,CAAC,EAAE,CAACE,YAAY,CAAC,CAAC;EAElB,oBACCN,OAAA;IAAKiB,SAAS,EAAE,wBAAyB;IAAAC,QAAA,gBACxClB,OAAA;MAAKiB,SAAS,EAAE,gBAAiB;MAAAC,QAAA,gBAChClB,OAAA;QAAIiB,SAAS,EAAE,eAAgB;QAAAC,QAAA,EAAEb,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEc;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAChEvB,OAAA;QAAKiB,SAAS,EAAE,mBAAoB;QAAAC,QAAA,EAClCb,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEG,OAAO,CAACgB,GAAG,CAAC,CAACC,MAI9B,EAAEC,KAAa,KAAK;UACpB;YAAA;YACC;YACA;YACA;YACA;YACS;YACT;YACA;YACA;YACA;YACS;YACT;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA1B,OAAA,CAACF,cAAc;cACd6B,KAAK,EAAE,GAAI;cACXC,MAAM,EAAE,GAAI;cACZC,UAAU,EAAC,cAAc,CAAC;cAAA;cAC1BC,WAAW,EAAC,YAAY,CAAC;cAAA;cACzBC,eAAe,EAAC,UAAU,CAAC;cAAA;cAC3BC,OAAO,EAAEA,CAAA,KAAMnB,kBAAkB,CAACY,MAAM,CAACQ,KAAK,CAAE;cAAAf,QAAA,gBAEhDlB,OAAA;gBAAMiB,SAAS,EAAE,eAAgB;gBAAAC,QAAA,EAAEO,MAAM,CAACQ;cAAK;gBAAAb,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACvDvB,OAAA;gBAAMiB,SAAS,EAAE,eAAgB;gBAAAC,QAAA,EAAEO,MAAM,CAACS;cAAK;gBAAAd,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACxC;UAAC;QAEnB,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACNvB,OAAA;MAAKiB,SAAS,EAAE,cAAe;MAAAC,QAAA,EAC7B5B,SAAS,CAACA,SAAS,CAACkC,GAAG,CAAC,CAAC;QAACW;MAAM,CAAC,EAAET,KAAa,KAAK;QACrD;UAAA;UACC;UACA;UACA;UACA;UACA;UACA;UACA;UACA1B,OAAA,CAACF,cAAc;YACd6B,KAAK,EAAE,GAAI;YACXC,MAAM,EAAE,GAAI;YACZX,SAAS,EAAC,cAAc,CAAC;YAAA;YACzBmB,WAAW,EAAC,YAAY,CAAC;YAAA;YACzBC,eAAe,EAAC,UAAU,CAAC;YAC3B;YAAA;YAAAnB,QAAA,eAEAlB,OAAA;cAAAkB,QAAA,GAAM,GAAC,EAACvB,sBAAsB,CAAC2C,MAAM,CAACH,MAAM,CAAC,CAAC;YAAA;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvC;QAAC;MAEnB,CAAC,CAAC,CAACgB,OAAO,CAAC;IAAC;MAAAnB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAER,CAAC;AAAArB,EAAA,CA3HYD,YAAsB;EAAA,QACnBL,cAAc,EACdC,WAAW,EACJN,WAAW,EACdA,WAAW,EACCA,WAAW;AAAA;AAAAiD,EAAA,GAL9BvC,YAAsB;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}